---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: rook-ceph-cluster
  namespace: rook-ceph
spec:
  interval: 15m
  chart:
    spec:
      chart: rook-ceph-cluster
      version: v1.11.1
      sourceRef:
        kind: HelmRepository
        name: rook-ceph
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    ingress:
      dashboard:
        annotations:
          kubernetes.io/ingress.class: nginx
          # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          # nginx.ingress.kubernetes.io/server-snippet: |
          #   proxy_ssl_verify off;
          hajimari.io/enable: "true"
          hajimari.io/appName: "Rook"
          hajimari.io/icon: mdi:chess-rook
        host:
          name: &host rook.rengo.dev
          path: /
        tls:
          - hosts:
              - *host
    toolbox:
      enabled: true
    monitoring:
      enabled: true
      createPrometheusRules: true
    configOverride: |
      [global]
      bdev_enable_discard = true
      bdev_async_discard = true
    cephClusterSpec:
      dataDirHostPath: /var/lib/rook
      continueUpgradeAfterChecksEvenIfNotHealthy: true
      # network:
        # provider: host
      crashCollector:
        disable: true
      logCollector:
        enabled: false
      # cleanupPolicy:
        # confirmation: "yes-really-destroy-data"
      mon:
        count: 3
        volumeClaimTemplate:
        spec:
          storageClassName: nvme-lvm
          resources:
            requests:
              storage: 10Gi
      mgr:
        modules:
          - name: rook
            enabled: true
          - name: pg_autoscaler
            enabled: true
          - name: nfs
            enabled: true
          - name: rgw
            enabled: true
          - name: mds_autoscaler
            enabled: true
          - name: prometheus
            enabled: true
      dashboard:
        enabled: true
        urlPrefix: /
        ssl: false
        port: 8080
      resources:
        mgr:
          requests:
            cpu: "1000m"
            memory: "2Gi"
        mon:
          requests:
            cpu: "2000m"
            memory: "2Gi"
      removeOSDsIfOutAndSafeToRemove: true
      priorityClassNames:
        mon: system-node-critical
        osd: system-node-critical
        mgr: system-cluster-critical
      storage:
        storageClassDeviceSets:
          - name: nvme
            count: 3
            portable: false
            tuneDeviceClass: true
            tuneFastDeviceClass: false
            encrypted: false
            placement:
              topologySpreadConstraints:
                - maxSkew: 1
                  topologyKey: kubernetes.io/hostname
                  whenUnsatisfiable: ScheduleAnyway
                  labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - rook-ceph-osd
                          - rook-ceph-osd-prepare
            preparePlacement:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 100
                    podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                          - key: app
                            operator: In
                            values:
                              - rook-ceph-osd
                          - key: app
                            operator: In
                            values:
                              - rook-ceph-osd-prepare
                      topologyKey: kubernetes.io/hostname
            resources:
              requests:
                cpu: "2"
                memory: "4Gi"
            volumeClaimTemplates:
              - metadata:
                  name: data
                  # if you are looking at giving your OSD a different CRUSH device class than the one detected by Ceph
                  annotations:
                    crushDeviceClass: nvme
                spec:
                  resources:
                    requests:
                      storage: 10Gi
                  # IMPORTANT: Change the storage class depending on your environment
                  storageClassName: nvme-lvm
                  volumeMode: Block
                  accessModes:
                    - ReadWriteOnce
        # when onlyApplyOSDPlacement is false, will merge both placement.All() and storageClassDeviceSets.Placement
        onlyApplyOSDPlacement: false
    cephBlockPools:
      - name: ceph-blockpool
        spec:
          failureDomain: host
          replicated:
            size: 3
            # enableRDBStats: true
        storageClass:
          enabled: true
          name: ceph-block
          isDefault: true
          reclaimPolicy: Delete
          allowVolumeExpansion: true
          volumeBindingMode: "Immediate"
          mountOptions: []
          parameters:
            imageFormat: "2"
            # imageFeatures: layering
            imageFeatures: layering,fast-diff,object-map,deep-flatten,exclusive-lock
            csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
            csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
            csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node
            csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
            csi.storage.k8s.io/fstype: ext4
            mapOptions: read_from_replica=localize

    cephFilesystems:
      - name: ceph-filesystem
        spec:
          metadataPool:
            replicated:
            size: 3
            deviceClass: nvme
          dataPools:
            failureDomain: host
            replicated:
              size: 3
            name: data0
            deviceClass: nvme
        storageClass:
          enabled: true
          name: cephFS
          pool: data0
          isDefault: false
          reclaimPolicy: Delete
          allowVolumeExpansion: true
          volumeBindingMode: "Immediate"
          mountOptions: []
          # see https://github.com/rook/rook/blob/master/Documentation/ceph-filesystem.md#provision-storage for available configuration
          parameters:
            # The secrets contain Ceph admin credentials.
            csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
            csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
            csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner
            csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
            csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
            csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
            csi.storage.k8s.io/fstype: ext4

    # cephFileSystemVolumeSnapshotClass:
    #   enabled: false
    #   name: ceph-filesystem
    #   isDefault: true
    #   deletionPolicy: Delete

    # cephBlockPoolsVolumeSnapshotClass:
    #   enabled: false
    #   name: ceph-block
    #   isDefault: false
    #   deletionPolicy: Delete

    # cephObjectStores:
    #   - name: ceph-objectstore
    #     spec:
    #       metadataPool:
    #         failureDomain: host
    #         replicated:
    #           size: 3
    #         parameters:
    #           compression_mode: none
    #         deviceClass: nvme
    #       dataPool:
    #         failureDomain: host
    #         erasureCoded:
    #           dataChunks: 2
    #           codingChunks: 1
    #         deviceClass: nvme
    #       preservePoolsOnDelete: true
    #       gateway:
    #         type: s3
    #         port: 80
    #         hostNetwork: false
    #         instances: 1
    #     storageClass:
    #       enabled: false
