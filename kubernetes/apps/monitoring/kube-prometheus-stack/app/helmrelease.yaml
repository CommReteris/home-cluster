---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  chart:
    spec:
      chart: prometheus-community/kube-prometheus-stack
      reconcileStrategy: ChartVersion
      sourceRef:
        name: ""
  interval: 1m0s
  values:
    alertmanager:
      alertmanagerSpec:
        image:
          registry: quay.io
          repository: prometheus/alertmanager
          sha: ""
          tag: v0.25.0
        podMetadata: {}
        storage:
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 50Gi
              selector: {}
              storageClassName: ceph-block
        useExistingSecret: false
      enabled: true
      ingress:
        annotations:
          external-dns.alpha.kubernetes.io/target: ipv4.rengo.dev
          external-dns.home.arpa/enabled: "false"
          hajimari.io/appName: Prometheus
          hajimari.io/icon: simple-icons:prometheus
          nginx.ingress.kubernetes.io/whitelist-source-range: |
            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
        enabled: true
        hosts:
          - alertmanager.rengo.dev
        ingressClassName: nginx
        pathType: ImplementationSpecific
        paths:
          - /
        tls:
          - hosts:
              - alertmanager.rengo.dev
            secretName: alertmanager-general-tls
      service:
        annotations: {}
        clusterIP: ""
        externalIPs: []
        externalTrafficPolicy: Cluster
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePort: 30903
        port: 9093
        targetPort: 9093
        type: ClusterIP
      serviceMonitor:
        interval: ""
        selfMonitor: true
      servicePerReplica:
        enabled: false
    cleanPrometheusOperatorObjectNames: false
    coreDns:
      enabled: true
      service:
        port: 9153
        targetPort: 9153
    defaultRules:
      create: true
    global:
      rbac:
        create: true
        createAggregateClusterRoles: false
        pspEnabled: false
    grafana:
      additionalDataSources: []
      adminPassword: prom-operator
      defaultDashboardsEnabled: true
      defaultDashboardsTimezone: America/New_York
      enabled: true
      extraConfigmapMounts: []
      forceDeployDashboards: true
      forceDeployDatasources: false
      ingress:
        annotations: {}
        enabled: false
        hosts: []
        path: /
        tls: []
      namespaceOverride: ""
      rbac:
        pspEnabled: false
      service:
        portName: http-web
      serviceMonitor:
        enabled: true
        path: /metrics
      sidecar:
        dashboards:
          enabled: true
          label: grafana_dashboard
          labelValue: "1"
        datasources:
          defaultDatasourceEnabled: true
          enabled: true
          isDefaultDatasource: true
    kube-state-metrics:
      namespaceOverride: ""
      prometheus:
        monitor:
          enabled: true
      rbac:
        create: true
      releaseLabel: true
      selfMonitor:
        enabled: false
    kubeApiServer:
      enabled: true
      tlsConfig:
        insecureSkipVerify: false
        serverName: kubernetes
    kubeControllerManager:
      enabled: true
    kubeDns:
      enabled: false
      service:
        dnsmasq:
          port: 10054
          targetPort: 10054
        skydns:
          port: 10055
          targetPort: 10055
    kubeEtcd:
      enabled: false
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeStateMetrics:
      enabled: false
    kubelet:
      enabled: true
      namespace: kube-system
    nodeExporter:
      enabled: true
    prometheus:
      additionalPodMonitors: []
      additionalRulesForClusterRole: []
      additionalServiceMonitors: []
      enabled: true
      ingress:
        annotations: {}
        enabled: false
        hosts: []
        labels: {}
        paths: []
        tls: []
      podDisruptionBudget:
        enabled: false
      podSecurityPolicy:
        allowedCapabilities: []
        allowedHostPaths: []
        volumes: []
      prometheusSpec:
        additionalAlertManagerConfigs: []
        additionalAlertManagerConfigsSecret: {}
        additionalAlertRelabelConfigs: []
        additionalAlertRelabelConfigsSecret: {}
        additionalArgs: []
        additionalPrometheusSecretsAnnotations: {}
        additionalRemoteRead: []
        additionalRemoteWrite: []
        additionalScrapeConfigs: []
        additionalScrapeConfigsSecret: {}
        affinity: {}
        alertingEndpoints: []
        allowOverlappingBlocks: false
        apiserverConfig: {}
        arbitraryFSAccessThroughSMs: false
        configMaps: []
        containers: []
        disableCompaction: false
        enableAdminAPI: false
        enableFeatures: []
        enableRemoteWriteReceiver: false
        enforcedLabelLimit: false
        enforcedLabelNameLengthLimit: false
        enforcedLabelValueLengthLimit: false
        enforcedNamespaceLabel: ""
        enforcedSampleLimit: false
        enforcedTargetLimit: false
        evaluationInterval: ""
        excludedFromEnforcement: []
        exemplars: ""
        externalUrl: ""
        hostAliases: []
        hostNetwork: false
        ignoreNamespaceSelectors: false
        image:
          registry: quay.io
          repository: prometheus/prometheus
          sha: ""
          tag: v2.42.0
        initContainers: []
        listenLocal: false
        logFormat: logfmt
        logLevel: info
        minReadySeconds: 0
        nodeSelector: {}
        overrideHonorLabels: false
        overrideHonorTimestamps: false
        paused: false
        podAntiAffinity: ""
        podAntiAffinityTopologyKey: kubernetes.io/hostname
        podMetadata: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelector: {}
        podMonitorSelectorNilUsesHelmValues: true
        portName: http-web
        priorityClassName: ""
        probeNamespaceSelector: {}
        probeSelector: {}
        probeSelectorNilUsesHelmValues: true
        prometheusExternalLabelName: ""
        prometheusExternalLabelNameClear: false
        prometheusRulesExcludedFromEnforce: []
        query: {}
        queryLogFile: false
        remoteRead: []
        remoteWrite: []
        remoteWriteDashboards: false
        replicaExternalLabelName: ""
        replicaExternalLabelNameClear: false
        replicas: 1
        resources: {}
        retention: 10d
        retentionSize: ""
        routePrefix: /
        ruleNamespaceSelector: {}
        ruleSelector: {}
        ruleSelectorNilUsesHelmValues: true
        scrapeInterval: ""
        scrapeTimeout: ""
        secrets: []
        securityContext:
          fsGroup: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: true
        shards: 1
        storageSpec: {}
        thanos: {}
        tolerations: []
        topologySpreadConstraints: []
        volumeMounts: []
        volumes: []
        walCompression: true
        web: {}
      service:
        additionalPorts: []
        externalIPs: []
        externalTrafficPolicy: Cluster
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePort: 30090
        port: 9090
        targetPort: 9090
        type: ClusterIP
      serviceMonitor:
        selfMonitor: true
      servicePerReplica:
        enabled: false
      thanosService:
        annotations: {}
        clusterIP: None
        enabled: false
        externalTrafficPolicy: Cluster
        httpNodePort: 30902
        httpPort: 10902
        httpPortName: http
        labels: {}
        nodePort: 30901
        port: 10901
        portName: grpc
        targetHttpPort: http
        targetPort: grpc
        type: ClusterIP
      thanosServiceExternal:
        enabled: false
      thanosServiceMonitor:
        enabled: false
        interval: ""
    prometheus-node-exporter:
      extraArgs:
        - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
        - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      namespaceOverride: ""
      podLabels:
        jobLabel: node-exporter
      prometheus:
        monitor:
          enabled: true
          jobLabel: jobLabel
      releaseLabel: true
      service:
        portName: http-metrics
    prometheusOperator:
      admissionWebhooks:
        certManager:
          enabled: true
        enabled: true
        patch:
          enabled: true
          image:
            pullPolicy: IfNotPresent
            registry: registry.k8s.io
            repository: ingress-nginx/kube-webhook-certgen
            sha: ""
            tag: v20221220-controller-v1.5.1-58-g787ea74b6
      enabled: true
      image:
        pullPolicy: IfNotPresent
        registry: quay.io
        repository: prometheus-operator/prometheus-operator
        resources:
          limits:
            cpu: 200m
            memory: 50Mi
          requests:
            cpu: 200m
            memory: 50Mi
        sha: ""
        tag: ""
      kubeletService:
        enabled: true
        name: ""
        namespace: kube-system
      networkPolicy:
        enabled: false
      service:
        annotations: {}
        clusterIP: ""
        externalIPs: []
        externalTrafficPolicy: Cluster
        labels: {}
        nodePort: 30080
        nodePortTls: 30443
        type: ClusterIP
      serviceAccount:
        create: true
        name: ""
      thanosImage:
        registry: quay.io
        repository: thanos/thanos
        sha: ""
        tag: v0.30.2
      tls:
        enabled: true
        internalPort: 10250
        tlsMinVersion: VersionTLS13
    thanosRuler:
      annotations: {}
      enabled: false
      extraSecret:
        annotations: {}
        data: {}
      ingress:
        annotations: {}
        enabled: false
        hosts: []
        labels: {}
        paths: []
        tls: []
      podDisruptionBudget:
        enabled: false
        maxUnavailable: ""
        minAvailable: 1
      service:
        additionalPorts: []
        annotations: {}
        clusterIP: ""
        externalIPs: []
        externalTrafficPolicy: Cluster
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePort: 30905
        port: 10902
        targetPort: 10902
        type: ClusterIP
      serviceAccount:
        annotations: {}
        create: true
        name: ""
      serviceMonitor:
        bearerTokenFile: null
        interval: ""
        labelLimit: 0
        labelNameLengthLimit: 0
        labelValueLengthLimit: 0
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
        sampleLimit: 0
        scheme: ""
        selfMonitor: true
        targetLimit: 0
        tlsConfig: {}
      thanosRulerSpec:
        affinity: {}
        alertmanagersConfig: {}
        containers: []
        evaluationInterval: ""
        externalPrefix: null
        image:
          registry: quay.io
          repository: thanos/thanos
          sha: ""
          tag: v0.30.2
        initContainers: []
        labels: {}
        listenLocal: false
        logFormat: logfmt
        logLevel: info
        nodeSelector: {}
        objectStorageConfig: {}
        objectStorageConfigFile: ""
        paused: false
        podAntiAffinity: ""
        podAntiAffinityTopologyKey: kubernetes.io/hostname
        podMetadata: {}
        portName: web
        priorityClassName: ""
        queryConfig: {}
        queryEndpoints: []
        replicas: 1
        resources: {}
        retention: 24h
        routePrefix: /
        ruleNamespaceSelector: {}
        ruleSelector: {}
        ruleSelectorNilUsesHelmValues: true
        securityContext:
          fsGroup: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        storage: {}
        tolerations: []
        topologySpreadConstraints: []
        volumeMounts: []
        volumes: []
