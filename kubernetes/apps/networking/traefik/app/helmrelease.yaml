---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: traefik
  namespace: networking
spec:
  interval: 15m
  chart:
    spec:
      chart: traefik
      version: 25.0.0
      sourceRef:
        kind: HelmRepository
        name: traefik
        namespace: flux-system
      interval: 1h

  dependsOn:
    - name: cert-manager
      namespace: cert-manager

  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace
  test:
    enable: true
  rollback:
    recreate: true
    force: true
    cleanupOnFail: true
  uninstall:
    keepHistory: false
  maxHistory: 3

  values:
    image:
      repository: traefik
      pullPolicy: IfNotPresent

    deployment:
      enabled: true
      # Can be either Deployment or DaemonSet
      kind: Deployment
      # https://github.com/traefik/traefik-helm-chart/blob/master/EXAMPLES.md
      replicas: 1


    # Pod disruption budget
    podDisruptionBudget:
      enabled: true
      # maxUnavailable: 1
      # maxUnavailable: 33%
      minAvailable: 1
      # minAvailable: 25%

    # Create a default IngressClass for Traefik
    ingressClass:
      enabled: true
      isDefaultClass: false

    # Enable experimental features
    experimental:
      v3:
        enabled: false
      plugins:
        enabled: true
      kubernetesGateway:
        enabled: false
        gateway:
          enabled: false
        # certificate:
        #   group: "core"
        #   kind: "Secret"
        #   name: "mysecret"
        # By default, Gateway would be created to the Namespace you are deploying Traefik to.
        # You may create that Gateway in another namespace, setting its name below:
        # namespace: default
        # Additional gateway annotations (e.g. for cert-manager.io/issuer)
        # annotations:
        #   cert-manager.io/issuer: letsencrypt

    # Create an IngressRoute for the dashboard
    ingressRoute:
      dashboard:
        enabled: false
        # Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class)
        annotations:
          kubernetes.io/ingress.class: traefik
          cert-manager.io/cluster-issuer: "letsencrypt-staging"
        # Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels)
        labels: {}
        # The router match rule used for the dashboard ingressRoute
        matchRule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
        # Specify the allowed entrypoints to use for the dashboard ingress route, (e.g. traefik, web, websecure).
        # By default, it's using traefik entrypoint, which is not exposed.
        # /!\ Do not expose your dashboard without any protection over the internet /!\
        entryPoints: ["websecure"]
        # Additional ingressRoute middlewares (e.g. for authentication)
        middlewares: []
        # TLS options (e.g. secret containing certificate)
        tls:
          hosts:
            - traefik.rengo.dev
          secretName: traefik-tls

    # Customize updateStrategy of traefik pods
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 0
        maxSurge: 1

    # Customize liveness and readiness probe values.
    readinessProbe:
      failureThreshold: 1
      initialDelaySeconds: 2
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2

    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 2
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2

    #
    # Configure providers
    #
    providers:
      # https://doc.traefik.io/traefik/providers/kubernetes-crd/
      kubernetesCRD:
        enabled: true
        allowCrossNamespace: false
        allowExternalNameServices: false
        allowEmptyServices: false
        ingressClass: traefik-internal
        # labelSelector: environment=production,method=traefik
        # namespaces: # Array of namespaces to watch. If left empty (which is the default), Traefik watches all namespaces.
          # - "default"

      kubernetesIngress:
        enabled:
        allowExternalNameServices: false
        allowEmptyServices: true
        ingressClass: traefik
        ingressEndpoint: rengo.dev
        ip: "${METALLB_TRAEFIK_ADDR}"
        # labelSelector: environment=production,method=traefik
        namespaces: []
          # - "default"
        # IP used for Kubernetes Ingress endpoints
        publishedService:
          enabled: false
          # Published Kubernetes Service to copy status from. Format: namespace/servicename
          # By default this Traefik service
          # pathOverride: ""

    # Environment variables to be passed to Traefik's binary
    env: []
    # - name: SOME_VAR
    #   value: some-var-value
    # - name: SOME_VAR_FROM_CONFIG_MAP
    #   valueFrom:
    #     configMapRef:
    #       name: configmap-name
    #       key: config-key
    # - name: SOME_SECRET
    #   valueFrom:
    #     secretKeyRef:
    #       name: secret-name
    #       key: secret-key

    envFrom: []
    # - configMapRef:
    #     name: config-map-name
    # - secretRef:
    #     name: secret-name

    # Configure ports
    ports:
      # The name of this one can't be changed as it is used for the readiness and
      # liveness probes, but you can adjust its config to your liking
      traefik:
        port: 9000
        # Use hostPort if set.
        # hostPort: 9000
        #
        # Use hostIP if set. If not set, Kubernetes will default to 0.0.0.0, which
        # means it's listening on all your interfaces and all your IPs. You may want
        # to set this value if you need traefik to listen on specific interface
        # only.
        # hostIP: 192.168.100.10

        # Override the liveness/readiness port. This is useful to integrate traefik
        # with an external Load Balancer that performs healthchecks.
        # Default: ports.traefik.port
        # healthchecksPort: 9000

        # Override the liveness/readiness scheme. Useful for getting ping to
        # respond on websecure entryPoint.
        # healthchecksScheme: HTTPS

        # Defines whether the port is exposed if service.type is LoadBalancer or
        # NodePort.
        #
        # You SHOULD NOT expose the traefik port on production deployments.
        # If you want to access it from outside of your cluster,
        # use `kubectl port-forward` or create a secure ingress
        expose: false
        # The exposed port for this service
        exposedPort: 9000
        # The port protocol (TCP/UDP)
        protocol: TCP
      web:
        ## Enable this entrypoint as a default entrypoint. When a service doesn't explicity set an entrypoint it will only use this entrypoint.
        # asDefault: true
        port: 8080
        # hostPort: 8000
        expose: true
        exposedPort: 80
        # The port protocol (TCP/UDP)
        protocol: TCP
        # Use nodeport if set. This is useful if you have configured Traefik in a
        # LoadBalancer.
        # nodePort: 32080
        # Port Redirections
        # Added in 2.2, you can make permanent redirects via entrypoints.
        # https://docs.traefik.io/routing/entrypoints/#redirection
        # redirectTo: websecure
        #
        # Trust forwarded  headers information (X-Forwarded-*).
        # forwardedHeaders:
        #   trustedIPs: []
        #   insecure: false
        #
        # Enable the Proxy Protocol header parsing for the entry point
        # proxyProtocol:
        #   trustedIPs: []
        #   insecure: false
      websecure:
        ## Enable this entrypoint as a default entrypoint. When a service doesn't explicity set an entrypoint it will only use this entrypoint.
        #asDefault: true
        port: 8443
        # hostPort: 8443
        expose: true
        exposedPort: 443
        ## The port protocol (TCP/UDP)
        protocol: TCP
        # nodePort: 32443
        #
        ## Enable HTTP/3 on the entrypoint
        ## Enabling it will also enable http3 experimental feature
        ## https://doc.traefik.io/traefik/routing/entrypoints/#http3
        ## There are known limitations when trying to listen on same ports for
        ## TCP & UDP (Http3). There is a workaround in this chart using dual Service.
        ## https://github.com/kubernetes/kubernetes/issues/47249#issuecomment-587960741
        http3:
          enabled: false
          advertisedPort: 4443
        #
        ## Trust forwarded  headers information (X-Forwarded-*).
        #forwardedHeaders:
        #  trustedIPs: []
        #  insecure: false
        #
        ## Enable the Proxy Protocol header parsing for the entry point
        #proxyProtocol:
        #  trustedIPs: []
        #  insecure: false
        #
        ## Set TLS at the entrypoint
        ## https://doc.traefik.io/traefik/routing/entrypoints/#tls
        tls:
          enabled: true
          # this is the name of a TLSOption definition
          options: ""
          certResolver: ""
          domains: []
          # - main: example.com
          #   sans:
          #     - foo.example.com
          #     - bar.example.com
        #
        # One can apply Middlewares on an entrypoint
        # https://doc.traefik.io/traefik/middlewares/overview/
        # https://doc.traefik.io/traefik/routing/entrypoints/#middlewares
        # /!\ It introduces here a link between your static configuration and your dynamic configuration /!\
        # It follows the provider naming convention: https://doc.traefik.io/traefik/providers/overview/#provider-namespace
        # middlewares:true
      metrics:
        # When using hostNetwork, use another port to avoid conflict with node exporter:
        # https://github.com/prometheus/prometheus/wiki/Default-port-allocations
        port: 9100
        # hostPort: 9100
        # Defines whether the port is exposed if service.type is LoadBalancer or
        # NodePort.
        #
        # You may not want to expose the metrics port on production deployments.
        # If you want to access it from outside of your cluster,
        # use `kubectl port-forward` or create a secure ingress
        expose: false
        # The exposed port for this service
        exposedPort: 9100
        # The port protocol (TCP/UDP)
        protocol: TCP
      nfs:
        port: 2049
        expose: true
        exposedPort: 2049
        protocol: TCP

    # TLS Options are created as TLSOption CRDs
    # https://doc.traefik.io/traefik/https/tls/#tls-options
    # Example:
    # tlsOptions:
    #   default:
    #     sniStrict: true
    #     preferServerCipherSuites: true
    #   foobar:
    #     curvePreferences:
    #       - CurveP521
    #       - CurveP384
    tlsOptions: {}

    # TLS Store are created as TLSStore CRDs. This is useful if you want to set a default certificate
    # https://doc.traefik.io/traefik/https/tls/#default-certificate
    # Example:
    # tlsStore:
    #   default:
    #     defaultCertificate:
    #       secretName: tls-cert
    tlsStore:
      default:
        defaultCertificate:
          secretName: "networking/${SECRET_DOMAIN/./-}-staging-tls"

    # Options for the main traefik service, where the entrypoints traffic comes
    # from.
    service:
      enabled: true
      ## Single service is using `MixedProtocolLBService` feature gate.
      ## When set to false, it will create two Service, one for TCP and one for UDP.
      single: true
      # type: LoadBalancer
      # Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific config)
      # annotations: {}
      # Additional annotations for TCP service only
      # annotationsTCP: {}
      # Additional annotations for UDP service only
      # annotationsUDP: {}
      # Additional service labels (e.g. for filtering Service by custom labels)
      # labels: {}
      # Additional entries here will be added to the service spec.
      # Cannot contain type, selector or ports entries.
      # spec:
        # externalTrafficPolicy: Cluster
        # loadBalancerIP: "${METALLB_TRAEFIK_ADDR}"
        # clusterIP: "2.3.4.5"
      # loadBalancerSourceRanges: []
        # - 192.168.0.1/32
        # - 172.16.0.0/16
      # externalIPs: []
        # - 1.2.3.4
      ## One of SingleStack, PreferDualStack, or RequireDualStack.
      # ipFamilyPolicy: SingleStack
      ## List of IP families (e.g. IPv4 and/or IPv6).
      ## ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
      # ipFamilies:
      #   - IPv4
      #   - IPv6
      ##
      ## An additionnal and optional internal Service.
      ## Same parameters as external Service
      # internal:
      #   type: ClusterIP
      #   # labels: {}
      #   # annotations: {}
      #   # spec: {}
      #   # loadBalancerSourceRanges: []
      #   # externalIPs: []
      #   # ipFamilies: [ "IPv4","IPv6" ]

    ## Create HorizontalPodAutoscaler object.
    ##
    autoscaling:
      enabled: false
      # minReplicas: 1
      # maxReplicas: 3
      # metrics:
      #   - type: Resource
      #     resource:
      #       name: cpu
      #       target:
      #         type: Utilization
      #         averageUtilization: 60
      #   - type: Resource
      #     resource:
      #       name: memory
      #       target:
      #         type: Utilization
      #         averageUtilization: 60
      # behavior:
      #   scaleDown:
      #     stabilizationWindowSeconds: 300
      #     policies:
      #       - type: Pods
      #         value: 1
      #         periodSeconds: 60

    # If hostNetwork is true, runs traefik in the host network namespace
    # To prevent unschedulabel pods due to port collisions, if hostNetwork=true
    # and replicas>1, a pod anti-affinity is recommended and will be set if the
    # affinity is left as default.
    hostNetwork: false

    # Whether Role Based Access Control objects like roles and rolebindings should be created
    rbac:
      enabled: true
      # If set to false, installs ClusterRole and ClusterRoleBinding so Traefik can be used across namespaces.
      # If set to true, installs Role and RoleBinding. Providers will only watch target namespace.
      namespaced: false
      # Enable user-facing roles
      # https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
      # aggregateTo: [ "admin" ]

    # Enable to create a PodSecurityPolicy and assign it to the Service Account via RoleBinding or ClusterRoleBinding
    podSecurityPolicy:
      enabled: false

    # The service account the pods will use to interact with the Kubernetes API
    serviceAccount:
      # If set, an existing service account is used
      # If not set, a service account is created automatically using the fullname template
      name: ""

    # Additional serviceAccount annotations (e.g. for oidc authentication)
    serviceAccountAnnotations: {}

    resources: {}
      # requests:
      #   cpu: "100m"
      #   memory: "50Mi"
      # limits:
      #   cpu: "300m"
      #   memory: "150Mi"

    # This example pod anti-affinity forces the scheduler to put traefik pods
    # on nodes where no other traefik pods are scheduled.
    # It should be used when hostNetwork: true to prevent port conflicts
    affinity: {}
    #  podAntiAffinity:
    #    requiredDuringSchedulingIgnoredDuringExecution:
    #      - labelSelector:
    #          matchLabels:
    #            app.kubernetes.io/name: '{{ template "traefik.name" . }}'
    #            app.kubernetes.io/instance: '{{ .Release.Name }}-{{ .Release.Namespace }}'
    #        topologyKey: kubernetes.io/hostname

    nodeSelector: {}
    tolerations: []
    topologySpreadConstraints: []
    # # This example topologySpreadConstraints forces the scheduler to put traefik pods
    # # on nodes where no other traefik pods are scheduled.
    #  - labelSelector:
    #      matchLabels:
    #        app: '{{ template "traefik.name" . }}'
    #    maxSkew: 1
    #    topologyKey: kubernetes.io/hostname
    #    whenUnsatisfiable: DoNotSchedule

    # Pods can have priority.
    # Priority indicates the importance of a Pod relative to other Pods.
    priorityClassName: ""

    # Set the container security context
    # To run the container with ports below 1024 this will need to be adjust to run as root
    securityContext:
      capabilities:
        drop: [ALL]
      readOnlyRootFilesystem: true
      runAsGroup: 65532
      runAsNonRoot: true
      runAsUser: 65532

    podSecurityContext:
      fsGroup: 65532

    #
    # Extra objects to deploy (value evaluated as a template)
    #
    # In some cases, it can avoid the need for additional, extended or adhoc deployments.
    # See #595 for more details and traefik/tests/values/extra.yaml for example.
    extraObjects: []

    # This will override the default Release Namespace for Helm.
    # It will not affect optional CRDs such as `ServiceMonitor` and `PrometheusRules`
    # namespaceOverride: traefik
    #
    ## This will override the default app.kubernetes.io/instance label for all Objects.
    # instanceLabelOverride: traefik
